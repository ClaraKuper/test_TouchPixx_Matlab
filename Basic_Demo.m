% Basic TouchPixx Demo
% 2019 by Clara Kuper
% based on ptb demos by Peter Scarfe http://peterscarfe.com/ptbtutorials.html
% and vpixx demo 17 http://www.vpixx.com/manuals/psychtoolbox/html/Demo17.html


% Clear the workspace and the screen
sca;
close all;
clearvars;

% Here we call some default settings for setting up Psychtoolbox
AssertOpenGL;
PsychDefaultSetup(2);

% Init random
rand('seed', sum(100 * clock));

% Set up screens
screens = Screen('Screens');
screenNumber = max(screens);
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% Open datapixx and init PsychImaging
Datapixx('Open');  %% Is it important to call this function before  PsychImaging('AddTask', 'General', 'UseDataPixx')?
PsychImaging('PrepareConfiguration');
PsychImaging('AddTask', 'General', 'UseDataPixx');

% Open windows
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, black);
[screenXpixels, screenYpixels] = Screen('WindowSize', window);
[xCenter, yCenter] = RectCenter(windowRect);
Screen('BlendFunction', window, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

winWidth = windowRect(3) - windowRect(1);
winHeight = windowRect(4) - windowRect(2);


% Parameters for stimuli
goal_moved = 300; % shift of target from centre

fixPos = [xCenter, yCenter] + [0, goal_moved];
fixColor = white;
fixSize = 20;

goalPos1 = fixPos + [300,0]; 
goalPos2 = fixPos + [-300,0]; 
goalColor = white;
goalSize = fixSize;

dotPos   = [xCenter, yCenter] + [0,300];
dotColor = white;
dotSizePix = fixSize;

%how long should the target be touched?
wait_for_t = 5;

% Add experiment Infor after OpenWindow so it's under the text generated by Screen
fprintf('\nTOUCHPixx Basic Demo\n');

% Configure DATAPixx/TOUCHPixx
Datapixx('SetVideoMode', 0);                        % Normal passthrough
Datapixx('EnableTouchpixx');                        % Turn on TOUCHPixx hardware driver
Datapixx('SetTouchpixxStabilizeDuration', 0.01);    % Stabilize inputs for calibration
Datapixx('RegWrRd');

%% Calibration as in VPixx Demo 17
% Put up first touch calibration target near top-left corner, and acquire TOUCHPixx coordinates
calDispX1 = 100;
calDispY1 = 100;
calCol = [255 255 255];
Screen('FillRect', window, calCol, [calDispX1-25 calDispY1-25 calDispX1+25 calDispY1+25]);
textCol = [0.5 0.5 0.5];
Screen('TextFont',window, 'Courier New');
Screen('TextSize',window, floor(50 * winWidth/1920));
DrawFormattedText(window, 'Touch center of first calibration square', 'center', 'center', textCol);
Screen('Flip', window);
touchPt = [0 0];                        % Wait for press
while touchPt == [0 0]
    Datapixx('RegWrRd');
    touchPt = Datapixx('GetTouchpixxCoordinates');
end;
calTouchX1 = touchPt(1);
calTouchY1 = touchPt(2);
Screen('Flip', window);

isPressed = 1;                          % Wait until panel release
while isPressed
    Datapixx('RegWrRd');
    status =  Datapixx('GetTouchpixxStatus');
    isPressed = status.isPressed;
end;

% Do same for a second calibration target near bottom-right corner of display
calDispX2 = winWidth - 100;
calDispY2 = winHeight - 100;
Screen('FillRect', window, calCol, [calDispX2-25 calDispY2-25 calDispX2+25 calDispY2+25]);
Screen('Flip', window);
touchPt = [0 0];                        % Wait for press
while touchPt == [0 0]
    Datapixx('RegWrRd');
    touchPt = Datapixx('GetTouchpixxCoordinates');
end;
calTouchX2 = touchPt(1);
calTouchY2 = touchPt(2);
Screen('Flip', window);
isPressed = 1;                          % Wait until panel release
while isPressed
    Datapixx('RegWrRd');
    status =  Datapixx('GetTouchpixxStatus');
    isPressed = status.isPressed;
end;

% Calculate linear mapping between touch coordinates and display coordinates
mx = (calDispX2 - calDispX1) / (calTouchX2 - calTouchX1);
my = (calDispY2 - calDispY1) / (calTouchY2 - calTouchY1);
bx = (calTouchX1 * calDispX2 - calTouchX2 * calDispX1) / (calTouchX1 - calTouchX2);
by = (calTouchY1 * calDispY2 - calTouchY2 * calDispY1) / (calTouchY1 - calTouchY2);

%% Run trials
for trial = 1:5
    %Datapixx('SetTouchpixxLog');                    % Configure TOUCHPixx logging with default buffer
    %Datapixx('EnableTouchpixxLogContinuousMode');   % Continuous logging during a touch, so we recognize a sweep-a-mole
    %Datapixx('StartTouchpixxLog');

    % Run the trial. Display the goal and a moving ball
  
    Screen('DrawDots', window, goalPos1, goalSize, goalColor, [], 2);
    Screen('DrawDots', window, goalPos2, goalSize, goalColor, [], 2);
    Screen('DrawDots', window, fixPos, fixSize, fixColor, [], 2);
    DrawFormattedText(window, 'Touch central point to start. Keep it touched for 5 secs', 'center', 200, textCol);
    Screen('Flip', window);
    
    % Now we have drawn to the screen and we wait for the participant to
    % touch the central point to start.
    
    hit_target = false;
    on_fix    = false;
    touchPt = [0 0];
    
    while ~ on_fix
        Datapixx('RegWrRd');
        touchPt = Datapixx('GetTouchpixxCoordinates');
        if ~ touchPt == [0 0]
            touch_X = mx*touchPt(1)+bx;
            touch_Y = my*touchPt(2)+by;
            if touch_X > fixPos(1) - 25 && touch_X < fixPos(1) + 25
                if touch_Y > fixPos(2) - 25 && touch_Y < fixPos(2) + 25
                    Screen('DrawDots', window, goalPos1, goalSize, goalColor, [], 2);
                    Screen('DrawDots', window, goalPos2, goalSize, goalColor, [], 2);
                    Screen('DrawDots', window, fixPos, fixSize, fixColor, [], 2);
                    DrawFormattedText(window, 'Touched', 'center', 200, textCol);
                    Screen('Flip', window);
                    on_fix = true;
                end
            end
        end
    end;
    
    % now control panel touch for 5 seconds  
    t_before_fix = GetSecs;
    
    while GetSecs - t_before_fix < wait_for_t
        % How much TOUCHPixx data is available to read?
        Datapixx('RegWrRd');
        status = Datapixx('GetTouchpixxStatus');
        %if isfield(status, 'newLogFrames') && status.newLogFrames > 0  % We have new TOUCHPixx logged data to read?
        %    [touches, timetags] = Datapixx('ReadTouchpixxLog',status.newLogFrames);
        %end
        if ~ status.isPressed
            DrawFormattedText(window, 'You should wait for 5 secs before you release!', 'center', 200, textCol);
            Screen('Flip', window); 
            WaitSecs(1);
            break
        end
        t_now = GetSecs;
    end;
    
    Datapixx('StopTouchpixxLog');
    Datapixx('RegWrRd');  
    
    Screen('Flip', window);
    WaitSecs(1);
    

end

% Clear the screen. "sca" is short hand for "Screen CloseAll". This clears
% all features related to PTB. Note: we leave the variables in the
% workspace so you can have a look at them if you want.
% For help see: help sca
Datapixx('Close')
sca;